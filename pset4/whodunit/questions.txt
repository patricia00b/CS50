1.  provides a set of typedefs that specify exact-width integer types
2.  
// testValue
unsigned long long testValue     = 0xFFFFFFFFFFFFFFFF; // 18446744073709551615

// 1 byte -> [0-255] or [0x00-0xFF]
uint8_t         number8     = testValue; // 255
unsigned char    numberChar    = testValue; // 255

// 2 bytes -> [0-65535] or [0x0000-0xFFFF]
uint16_t         number16     = testValue; // 65535
unsigned short    numberShort    = testValue; // 65535

// 4 bytes -> [0-4294967295] or [0x00000000-0xFFFFFFFF]
uint32_t         number32     = testValue; // 4294967295
unsigned int     numberInt    = testValue; // 4294967295

 // 8 bytes -> [0-18446744073709551615] or [0x0000000000000000-0xFFFFFFFFFFFFFFFF]
uint64_t             number64         = testValue; // 18446744073709551615
unsigned long long     numberLongLong    = testValue; // 18446744073709551615

3.  
        1 byte in a BYTE
        4 bytes in a DWORD (32 bits)
        4 bytes in a LONG (32 bits)
        2 bytes in a WORD (16 bits)
4.  ASCII B then ASCII M.
Hex:    0x424d
ASCII:  BM (bitmap!)
This value is stored in "bfType".
5.  
bfSize is the total number of bytes in the file (246 for smiley.bmp).
biSize is the number of bytes in the info header (40 for a bitmap).
6.  For uncompressed RGB bitmaps, if biHeight is positive, the bitmap is a bottom-
up DIB with the origin at the lower left corner. If biHeight is negative, the
bitmap is a top-down DIB with the origin at the upper left corner.
7.  biBitCount
8.  
        fopen might return a NULL pointer if the file that fopen is trying to 
        write to doesn't exist.
9.  
        fread's third argument is always 1 because we are iterating over every 
        pixel.
10. If biWidth is 3:
        int padding =  (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4 = 3.
        This step ensures the number of bytes in every row is a multiple of 4.
The padding would be 3, because 3 pixels * 3 bytes per pixel * 3 padding = 12,
which is a multiple of 4.
11. It moves to a specific location in a file.
12. An integer constant which, when used as the 'whence' argument to the
fseek or fseeko function, specifies that the offset provided is relative to
the current file position.
